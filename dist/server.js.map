{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","savedIssue","MongoClient","connect","client","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AACAA,2BAAiBC,OAAjB;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEAN,IAAIO,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCH,KAAGI,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GACKC,IADL,CACUC,UAAU;AACd,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAR,QAAIJ,IAAJ,CAAS,EAAEa,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAJL,EAKKM,KALL,CAKWC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,QAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GARL;AASD,CAVD;;AAYArB,IAAI0B,IAAJ,CAAS,aAAT,EAAwB,CAAClB,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMkB,WAAWnB,IAAIoB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EAAsB;AACpBG,aAASH,MAAT,GAAkB,KAAlB;AACD;;AAED,QAAMO,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPtB,QAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;;AAEDzB,KAAGI,UAAH,CAAc,QAAd,EAAwBwB,SAAxB,CAAkCF,gBAAMG,YAAN,CAAmBR,QAAnB,CAAlC,EAAgEd,IAAhE,CAAqEuB,UACjE9B,GAAGI,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAE0B,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACKC,IADL,EADJ,EAIK3B,IAJL,CAIU4B,cAAc;AAClBhC,QAAIJ,IAAJ,CAASoC,UAAT;AACD,GANL,EAOKrB,KAPL,CAOWC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAZ,QAAIe,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GAVL;AAWD,CAxBD;;AA0BAqB,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiD,CAACZ,GAAD,EAAMa,MAAN,KAAiB;AAChEtC,OAAKsC,OAAOtC,EAAP,CAAU,MAAV,CAAL;AACAN,MAAI6C,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBvB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray()\n      .then(issues => {\n        const metadata = { total_count: issues.length };\n        res.json({ _metadata: metadata, records: issues });\n      })\n      .catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n      });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result =>\n      db.collection('issues').find({ _id: result.insertedId }).limit(1)\n          .next()\n  )\n      .then(savedIssue => {\n        res.json(savedIssue);\n      })\n      .catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n      });\n});\n\nMongoClient.connect('mongodb://localhost:27017', (err, client) => {\n  db = client.db('MyDB');\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n});"]}